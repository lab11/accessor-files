<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="PrintColor" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
        <property name="iterations" class="ptolemy.data.expr.Parameter" value="AUTO">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{60, 50}">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Print Color&#10;&#10;This is a test accessor that prints a string to the console.&#10;The string will be colored (using terminal escapes) according&#10;to the value on the color port. The color must be a six character&#10;hex string, encoded as &quot;RRGGBB&quot;.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[165.0, 35.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={373, 208, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{340.0, 252.0}">
    </property>
    <entity name="PrintColor" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="var rt = {};&#10;rt.log = {};&#10;rt.log.log = print;&#10;rt.log.debug = print;&#10;rt.log.info = print;&#10;rt.log.warn = print;&#10;rt.log.error = print;&#10;rt.log.critical = function (err) {&#10;	print(err);&#10;	throw &quot;This accessor had a critical error. Needs to exit&quot;;&#10;};&#10;&#10;/* The send implementations differ only in argument order, patch */&#10;var _berkeley_send = send;&#10;send = function(a, b) {&#10;	_berkeley_send(b, a);&#10;}&#10;&#10;// author:  Brad Campbell&#10;// email:   bradjc@umich.edu&#10;//&#10;// Command Line Print in Color&#10;// ===============================&#10;//&#10;// Echos text in the color specified.&#10;&#10;var xt256_color = 32;&#10;&#10;function init() {&#10;    }&#10;&#10;// Find the xterm-256 value that is closest to the color channel&#10;function nearest_offset (channel_val) {&#10;  var values = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];&#10;  var best_diff = 255;&#10;  var selection = 0;&#10;&#10;  for (var i=0; i&lt;values.length; i++) {&#10;    var diff = Math.abs(values[i] - channel_val);&#10;    if (diff &lt; best_diff) {&#10;      best_diff = diff;&#10;      selection = i;&#10;    }&#10;  }&#10;  return selection;&#10;}&#10;&#10;_Color_input = function (color) {&#10;color = get('Color');&#10;  var r = parseInt(color.substring(0, 2), 16);&#10;  var g = parseInt(color.substring(2, 4), 16);&#10;  var b = parseInt(color.substring(4, 6), 16);&#10;&#10;  var ri = nearest_offset(r);&#10;  var gi = nearest_offset(g);&#10;  var bi = nearest_offset(b);&#10;&#10;  xt256_color = 16 + (36 * ri) + (6 * gi) + bi;&#10;}&#10;&#10;_Text_input = function (text) {&#10;text = get('Text');&#10;  rt.log.log('\033[38;5;'+xt256_color+'m' + text + '\033[0m');&#10;}&#10;get_parameter = function (param) {&#10;	return get(param);&#10;}&#10;&#10;exports.setup = function() {&#10;	accessor.author('Brad Campbell &lt;bradjc@umich.edu&gt;');&#10;	accessor.version('0.1');&#10;	accessor.description('Command Line Print in Color');&#10;	&#10;	accessor.input('Color', {&#10;		'type': 'string',&#10;	});accessor.input('Text', {&#10;		'type': 'string',&#10;	});&#10;	&#10;	&#10;};&#10;&#10;exports.fire = function() {&#10;&#10;};&#10;&#10;exports.initialize = function() {&#10;	print(&quot;INITIALIZE CALLED&quot;);&#10;	addInputHandler(_Color_input, 'Color');&#10;	addInputHandler(_Text_input, 'Text');&#10;&#10;	if (typeof(init) !== undefined) {&#10;		init();&#10;	}&#10;};&#10;&#10;exports.wrapup = function() {&#10;	print(&quot;WRAPUP CALLED&quot;);&#10;	removeInputHandler(_Color_input, 'Color');&#10;	removeInputHandler(_Text_input, 'Text');&#10;&#10;/* Name conflict; leads to recurision. Nothing we have uses this fn anyway &#10; *&#10;	if (typeof(wrapup) !== undefined) {&#10;		wrapup();&#10;	}&#10; */&#10;};&#10;&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://localhost:6565/ptolemy//ui/PrintColor.js">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{350.0, 262.0}">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="Command Line Print in Color">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Brad Campbell &lt;bradjc@umich.edu&gt;">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="0.1">
            </property>
        </property>
        <port name="Color" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="Text" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <entity name="StringConst" class="ptolemy.actor.lib.StringConst">
        <property name="value" class="ptolemy.data.expr.Parameter" value="0000FF">
        </property>
        <doc>Create a constant sequence with a string value.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="80">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 215.0]">
        </property>
    </entity>
    <entity name="StringConst2" class="ptolemy.actor.lib.StringConst">
        <property name="value" class="ptolemy.data.expr.Parameter" value="Hello big blue world!">
        </property>
        <doc>Create a constant sequence with a string value.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="80">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{120, 270}">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="PrintColor.Color" relation="relation"/>
    <link port="PrintColor.Text" relation="relation2"/>
    <link port="StringConst.output" relation="relation"/>
    <link port="StringConst2.output" relation="relation2"/>
</entity>
